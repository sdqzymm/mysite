"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['MYSITE_SECRET_KEY']  # 需自己配置

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'account.apps.AccountConfig',
    'dancing.apps.DancingConfig',
    'comment.apps.CommentConfig',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# API设置
BASE_URL = os.environ['BASE_URL']  # 需自己配置: 本地-> http://127.0.0.1:8000

# 指定用户类
AUTH_USER_MODEL = 'account.UserProfileModel'

# 指定media根路径
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = BASE_URL + '/media/'


class Rest:
    def __init__(self):
        self.code = 0
        self.msg = ''
        self.data = {}

    def set(self, code=0, msg='', data=None):
        self.code = code
        self.msg = msg
        if data is not None:
            self.data = data


# rest_framework全局配置
REST_FRAMEWORK = {
    # 版本组件
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': None,  # None表示所有所有版本
    'VERSION_PARAM': 'version',  # 版本参数
    # 认证组件
    'DEFAULT_AUTHENTICATION_CLASSES': ['account.utils.auth.MyAuth'],
    # 权限组件
    'DEFAULT_PERMISSION_CLASSES': [],
    # 频率组件
    'DEFAULT_THROTTLE_CLASSES': [],
    'DEFAULT_THROTTLE_RATES': {  # 默认频率
        'rate': '15/m'    # scope
    },
}


# redis缓存
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{os.environ["TENCENT_YUN_IP"]}:6379/2',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": os.environ['PASSWORD'],
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
            "DECODE_RESPONSES":True,
            "SOCKET_CONNECT_TIMEOUT": 5,
            "SOCKET_TIMEOUT": 5,
        },
    },
}

# 邮箱配置: 根据自身情况配置
EMAIL_HOST = 'smtp.qq.com'  # QQ邮箱服务
EMAIL_PORT = 25  # 端口,看具体云服务商,阿里云要改465
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER'] # 邮箱账号
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD'] # 邮箱授权码
EMAIL_USE_TLS = True
EMAIL_FROM = '幻云风' # 对方看到的名称(没有鸟用啊..)

